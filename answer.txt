Step-by-Step Plan
1. Write a Minimal C Collector for Power

A simple C tool that:

    Uses perf_event_open

    Measures energy from power/energy-pkg/

    Outputs result to stdout or shared memory

Example: energy_collector.c

// Compile with: gcc energy_collector.c -o energy_collector -lrt
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <linux/perf_event.h>
#include <asm/unistd.h>
#include <sys/syscall.h>
#include <stdint.h>

static long
perf_event_open(struct perf_event_attr *hw_event, pid_t pid,
                int cpu, int group_fd, unsigned long flags)
{
    return syscall(__NR_perf_event_open, hw_event, pid, cpu,
                   group_fd, flags);
}

int main()
{
    struct perf_event_attr pe;
    memset(&pe, 0, sizeof(struct perf_event_attr));
    pe.type = PERF_TYPE_POWER;
    pe.config = PERF_COUNT_HW_ENERGY_PKG;  // Intel RAPL
    pe.size = sizeof(struct perf_event_attr);
    pe.disabled = 1;

    int fd = perf_event_open(&pe, -1, 0, -1, 0);
    if (fd == -1) {
        perror("perf_event_open");
        exit(EXIT_FAILURE);
    }

    uint64_t before, after;

    read(fd, &before, sizeof(uint64_t));
    usleep(100000);  // 100ms
    read(fd, &after, sizeof(uint64_t));

    printf("%lu\n", after - before);  // microjoules
    close(fd);
    return 0;
}

2. Call It from Python
In your collect_sample loop:

def read_energy_microjoules():
    try:
        result = subprocess.run(
            ["./collector/energy_collector"],
            capture_output=True, text=True, check=True
        )
        return int(result.stdout.strip())
    except Exception as e:
        print(f"[WARN] C energy collector failed: {e}")
        return None

Now your Python collector gets accurate microjoule deltas with <1ms overhead â€” no perf stat subprocess cost!
ðŸ”„ Bonus: Make a libpower.so and Use ctypes

Instead of calling a binary, you can:

    Build the collector as a shared library

    Load it directly in Python with ctypes for near-zero overhead

Let me know if you want that setup too.
ðŸš¦Next Steps You Can Take

Add a collector/Makefile

Plug read_energy_microjoules() into your main loop with Î” calculation

Add fallback to Python if the C binary fails or perf is unsupported

    (Later) Support DRAM/uncore power, or Intel MSRs directly

Would you like:

    A Makefile for the C module?

    ctypes version that loads a shared lib?

    DRAM power collection too?

Letâ€™s build it cleanly â€” hybrid is the way to go ðŸš€






systemd.unit -- daemon that runs in background
active track a directory and listen for a pid to be added (inotify) when pid added start tracking
perf filter by cgroup
